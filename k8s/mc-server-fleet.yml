apiVersion: "agones.dev/v1"
kind: Fleet
metadata:
  name: mc-fleet
spec:
  # the number of GameServers to keep Ready or Allocated in this Fleet
  replicas: 3
  # defines how GameServers are organised across the cluster.
  # "Packed" (default) is aimed at dynamic Kubernetes clusters, such as cloud providers, wherein we want to bin pack
  # resources
  scheduling: Packed
  strategy:
    # "RollingUpdate" will increment by maxSurge value on each iteration, while decrementing by maxUnavailable on each
    # iteration, until all GameServers have been switched from one version to another.
    # "Recreate" terminates all non-allocated GameServers, and starts up a new set with the new details to replace them.
    type: RollingUpdate
    rollingUpdate:
      # the amount to increment the new GameServers by. Defaults to 25%
      maxSurge: 25%
      # the amount to decrements GameServers by. Defaults to 25%
      maxUnavailable: 25%
  template:
    # GameServer metadata
    metadata:
      annotations:
        agones-mc/domain: <DOMAIN_NAME>
    spec:
      container: mc-server # Minecraft server container name
      ports:
      - name: mc
        portPolicy: Dynamic
        containerPort: 25565
        protocol: TCP
      health:
        initialDelaySeconds: 60
        periodSeconds: 12
        failureThreshold: 5
      # The GameServer's Pod template
      template:
        spec:
          containers:
            - name: mc-server
              image: itzg/minecraft-server # Minecraft server image
              env: # Full list of ENV variables at https://github.com/itzg/docker-minecraft-server
                - name: EULA
                  value: "TRUE"

            - name: mc-monitor
              image: saulmaldonado/agones-mc-monitor # Agones SDK sidecar
              imagePullPolicy: Always
